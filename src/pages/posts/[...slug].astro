---
import BaseLayout from "../../layouts/BaseLayout.astro";

const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
// const builderModelName = "blogpost"
const handleError = (err) => {
    // The requested Builder content could not be found.
    if (err.response.status === 404) {
        return { data: null };
    }
    throw err;
};

export async function getStaticPaths() {
    // We need to repeat this here, as `getStaticPaths` doesn't have access to variables in its parent's scope.
    // See relevant docs here: https://docs.astro.build/en/reference/api-reference/#getstaticpaths

    const baseURL = "https://astro-builder-restapi.netlify.app/";
    const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;

    const handleError = (err) => {
        // The requested Builder content could not be found.
        if (err.response.status === 404) {
            return { data: null };
        }
        throw err;
    };

    const { results: posts } = await fetch(
        `https://cdn.builder.io/api/v2/content/blogpost?apiKey=${builderAPIpublicKey}&fields=id,name,data.slug,data.title`
    )
        .then((res) => res.json())
        .catch(handleError);

    return [
        ...posts.map(({ data: { slug, title } }) => [
            {
                params: { slug },
                props: { title, isPreview: false },
            },
            // attempt at a dynamic preview URL.
            // {
            //     params: { slug: `${slug}/builder-preview` },
            //     props: { title, isPreview: true },
            // },
        ]),
        // {
        //     params: { slug: `builder-preview` },
        //     props: { isPreview: true },
        // },
    ];
}
const { slug } = Astro.params;
const { title, isPreview } = Astro.props;

// for this use case the url doesn't seem to matter - the API returns the same HTML
const encodedUrl = encodeURIComponent("moot");

const { html: postHTML } = await fetch(
    `https://cdn.builder.io/api/v1/qwik/blogpost?apiKey=${builderAPIpublicKey}&url=${encodedUrl}&query.data.slug=${slug}&limit=1`
)
    .then((res) => res.json())
    .catch(handleError);
---

<BaseLayout pageTitle={title}>
    <!-- {
        isPreview ? (
            <>
                <builder-component
                    model="blogpost"
                    api-key={builderAPIpublicKey}
                />
                <script async src="https://cdn.builder.io/js/webcomponents" />
            </>
        ) : (
            <Fragment set:html={postHTML} />
        )
    } -->
    <Fragment set:html={postHTML} />
</BaseLayout>
