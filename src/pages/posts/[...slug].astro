---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { handleError } from "../../scripts/utils";

const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;

export async function getStaticPaths() {
    // We need to repeat this here, as `getStaticPaths` doesn't have access to variables in its parent's scope.
    // Relevant docs: https://docs.astro.build/en/reference/api-reference/#getstaticpaths
    const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
    const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;
    // const baseURL = "https://astro-builder-restapi.netlify.app/";

    const { results: posts } = await fetch(
        `https://cdn.builder.io/api/v2/content/${builderModel}?${new URLSearchParams(
            {
                apiKey: builderAPIpublicKey,
                fields: ["id", "name", "data.slug", "data.title"].join(","),
                cachebust: "true",
            }
        ).toString()}`
    )
        .then((res) => res.json())
        .catch(handleError);

    return [
        ...posts.map(({ data: { slug, title } }) => [
            {
                params: { slug },
                props: { title, isPreview: false },
            },
            // attempt at a dynamic preview URL.
            // {
            //     params: { slug: `${slug}/builder-preview` },
            //     props: { title, isPreview: true },
            // },
        ]),
        // {
        //     params: { slug: `builder-preview` },
        //     props: { isPreview: true },
        // },
    ];
}
const { slug } = Astro.params;
const { title, isPreview } = Astro.props;

// Builder's API requires this field but for this use case the url doesn't seem to matter - the API returns the same HTML
const encodedUrl = encodeURIComponent("moot");

const { html: postHTML } = await fetch(
    `https://cdn.builder.io/api/v1/qwik/${builderModel}?${new URLSearchParams({
        apiKey: builderAPIpublicKey,
        url: encodedUrl,
        "query.data.slug": slug,
        cachebust: "true",
    }).toString()}`
)
    .then((res) => res.json())
    .catch(handleError);
---

<BaseLayout pageTitle={title}>
    <!-- {
        isPreview ? (
            <>
                <builder-component
                    model="blogpost"
                    api-key={builderAPIpublicKey}
                />
                <script async src="https://cdn.builder.io/js/webcomponents" />
            </>
        ) : (
            <Fragment set:html={postHTML} />
        )
    } -->
    <Fragment set:html={postHTML} />
</BaseLayout>
